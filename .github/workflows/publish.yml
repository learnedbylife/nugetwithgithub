name: "Deploy to NuGet"

on:
   push:
    branches:
      - main
   pull_request:
     branches:
      - main
   release:
    types:
      - published

permissions:
  id-token: write
  contents: read

env:
  PROJECT_PATH: "nugetwithgithub/nugetwithgithub.csproj"
  PACKAGE_OUTPUT_DIR: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: "https://github.com/learnedbylife/nugetwithgithub"

jobs:
  deploy:
    name: "Deploy"
    runs-on: "ubuntu-latest"
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Dotnet"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: "Restore package"
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: "Build package"
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release

    - name: Get latest tag 
      id: latest_tag
      run: |
          git fetch --tags
          echo ::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)

    - name: Output latest tag
      run: echo "Latest tag is ${{ steps.latest_tag.outputs.tag }}"
    
    - name: Calculate next version
      id: next_version
      run: |
        # Get the latest tag
        LATEST_TAG=${{ steps.get_tag.outputs.tag }}
    
        # Extract the version numbers
        IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_TAG"
    
        # Check commit messages for keywords
        if git log -1 --pretty=%B | grep -q 'MAJOR'; then
            VERSION_PARTS[0]=$((VERSION_PARTS[0]+1))
            VERSION_PARTS[1]=0
            VERSION_PARTS[2]=0
            elif git log -1 --pretty=%B | grep -q 'MINOR'; then
            VERSION_PARTS[1]=$((VERSION_PARTS[1]+1))
            VERSION_PARTS[2]=0
        else
            VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))
        fi
    
        # Set the next version
        NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$VERSION_PARTS[2]"
        echo "Next version: $NEXT_VERSION"
        echo ::set-output name=next_version::$NEXT_VERSION

    - name: Update .csproj version
      run: |
        NEXT_VERSION=${{ steps.next_version.outputs.next_version }}
        sed -i "s/<Version>.*<\/Version>/<Version>$NEXT_VERSION<\/Version>/" ${{ env.PROJECT_PATH }}

    - name: Output user details
      run: echo "user details ${{ vars.username }} ${{ vars.email }}"

    - name: Set branch name
      id: branch_name
      run: echo ::set-output name=branch::${GITHUB_REF#refs/heads/}

    - name: Output branch name
      run: echo "Current branch is ${{ steps.branch_name.outputs.branch }}"

    - name: Commit version increment
      run: |
          git config --global user.name '${{ vars.username }}'
          git config --global user.email '${{ vars.email }}'
          git add ${{ env.PROJECT_PATH }}
          git commit -m "Increment version to ${{ steps.next_version.outputs.next_version }}"
          git tag v${{ steps.next_version.outputs.next_version }}
          git push origin main --tags

    - name: Pack
      run: dotnet pack --no-build --configuration Release --output ./output

    - name: Publish to GitHub Packages
      run: dotnet nuget push ./output/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_AUTH_TOKEN }} -s https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

    # - name: "Pack project"
    #   run: dotnet pack ${{ env.PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols --output ${{ env.PACKAGE_OUTPUT_DIR }}

    # - name: "Push package"
    #   run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIR }}\*.nupkg --api-key ${{ secrets.NUGET_AUTH_TOKEN }} -s ${{ env.NUGET_SOURCE_URL }}